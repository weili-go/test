1.Towards A General Purpose Plasma
https://medium.com/plasma-group/towards-a-general-purpose-plasma-f1cc4d49c1f4

Each deployed plasma chain was application-specific due to constraints in the old plasma architecture.
Not upgradeable, not generalizable.

What we really needed was a way for people to build applications on top of a general-purpose plasma chain in the same way you build dapps on a general-purpose blockchain like Ethereum.

It establishes a clean separation between the plasma layer and the application layer.

Writing a new plapp is as simple as writing a special type of smart contract, called a predicate contract, and deploying it to Ethereum. 

https://www.chainnews.com/articles/018605932855.htm
中国语版本


2. Generalized Plasma State Spec

https://pigi.readthedocs.io/en/latest/src/specs/generalized-plasma-state.html


3. プラズマとは？イーサリアムのスケーリング技術の特徴・仕組み・今後を解説！
https://coinotaku.com/?p=18859

この記事を読んで分かること
スケーラビリティ問題とは
プラズマの仕組み
プラズマの欠陥と解決策

この問題はブロックチェーンに限った問題ではなく、現在のあらゆるネットワークが必然的に抱える問題です。

この問題に対する解決策としていくつか考えることができます。一つ目は、サーバーの台数を増やすこと。ただ単純に処理できる量を上げる方法です。あと、サーバーの処理速度自体を上げることも一つの手法として考えられます。

​原因は単純で、イーサリアムを利用するユーザーが極端に増えたことが一因です。イーサリアムのアドレス数は現在下図のようになっています。


ブロックの容量自体を上げることです。
 二つ目は、ブロックの中に多くのトランザクションを入れるようにすることです。具体的にはSegwitという技術を使うことで、署名の部分だけをブロックとは別の領域に保存し、ブロックの中に保存するトランザクションのデータ量を小さくします。
 
3.Understanding: Plasma Chains vs. Sidechains
https://pigi.readthedocs.io/en/latest/src/plasma/sidechains.html

the pros

Just like sidechains, plasma chains have a consensus mechanism that creates blocks. However, unlike sidechains, the “root” of each plasma chain block is published to Ethereum

Simply stated, a plasma chain is as secure as the main chain consensus mechanism, whereas as sidechain is only as secure as its own consensus mechanism.

This convenient property also means that the plasma chain can use really simple consensus mechanisms (like just a single authority!) and still be safe.

the con

Well, when we’re using a sidechain we have to trust the sidechain consensus mechanism. If that mechanism fails, we’re out of luck anyway. That trust makes it possible to do really complex things because we also implicitly trust that the sidechain will be around in the future.

Luckily that’s not so difficult, but it’s more complex than it would be on the sidechain.

4. Understanding: The Plasma Chain Operator
https://pigi.readthedocs.io/en/latest/src/plasma/operator.html


1. No one should be able to re-write history.
2. No one should be blocked from making transactions.

However, this is where the magic of plasma comes in. Plasma chains are designed in a way that no matter what, a user can always withdraw their money from the plasma chain back to the main chain.

 At the same time, it tends to be unimportant research-wise whether the operator is a single person or many people. As a result, you’ll often see people just assuming the operator is a single person for simplicity.

As a result, you’ll often see people just assuming the operator is a single person for simplicity.


5. 汎用的なプラズマの構造を理解しよう
Understanding the Generalized Plasma Architecture

https://medium.com/cryptoeconomics-lab/%E6%B1%8E%E7%94%A8%E7%9A%84%E3%81%AA%E3%83%97%E3%83%A9%E3%82%BA%E3%83%9E%E3%81%AE%E6%A7%8B%E9%80%A0%E3%82%92%E7%90%86%E8%A7%A3%E3%81%97%E3%82%88%E3%81%86-d3c20e01c713

プレディケート
マークルルート
誰によって所有されたか、そしてその所有権が他の誰かに移っていないかどうか、といった情報です。

デポジット

また、資産の所有権の移転以上に複雑なことも表現することができます。

状態遷移
アップグレード

プラズマチェーンの設計に新しい機能を追加したいと考えたときに,
メインのプラズマチェーンコントラクトを変えることなく新しい機能を追加する簡単な方法を思いつきました。

メインのスマートコントラクトでその反証が正当なものかどうか確認しなくてもよいとに気づいたことでした。
代わりに、正当性を確認する機能を搭載した他のスマートコントラクトを新たに用意すればいいのです。
つまり新しい機能を足すには、その新機能に必要なロジックを実装した新しいコントラクトを作り、今までのメインコントラクトからその新しいコントラクトを参照すればいいのです。
この外部コントラクトをPredicate（プレディケート）と名付けました。

簡単です。ステートアップデートがどのプレディケートに対応しているものなのか指定するという条件を追加すればいいのです。

ユーザーはどれでも好きなようにプレディケートのアドレスを指定できるので、新しいプレディケートをEthereumにデプロイするだけで誰でも好きな時に新しい機能をプラズマチェーンに足すことができます。
何が重要かというとプレディケートには標準的なインターフェースを実装する必要があるということです。

プレディケートは標準的なコントラクトのインターフェースを実装しなければなりません。それらの関数を実際に見ていきましょう。

プラズマコントラクトがする最も重要な作業はステートアップデートの正当性を見極めることです。

state deprecationはUTXOモデルのブロックチェーンにおいて、UTXO（未使用トランザクションアウトプット）が使用済みトランザクションアウトプットに変わるのに似ています。


なぜかというとそのアップデートを期限切れのものだとdeprecate(無効化)できるのはアリスだけであり、アリスはまだ自分のステートアップデートを無効化していないからです。

6. Generalized Plasma State Spec
https://pigi.readthedocs.io/en/latest/src/specs/generalized-plasma-state.html

parameters: bytes - input parameters to the predicate ruleset

The plasma contract stores a mapping from depositEnd->deposit

7. 中国語版　plasma-core实现的架构

https://www.8btc.com/article/414944

https://www.8btc.com/article/415425

Plasma 结构要求用户下载整个Plasma 链，以确保他们的资金安全。使用Plasma Cash，他们只需下载与自己资金相关的Merkle树枝。

这是通过引入一个新的事务有效性条件来实现的：特定CoinID的事务只在Merkle树的CoinIdth叶中有效。因此，只下载该分支就足够确信该硬币不存在有效的交易。

https://www.8btc.com/article/395541


https://mp.weixin.qq.com/s?__biz=MzU2MDE2MDU3Mg==&mid=2247490970&idx=1&sn=056ef0dc91b61fac8d62ba4cca90a3d0&chksm=fc0d17c9cb7a9edf40246d111c22c07816620207bed5282ec05d6e5e5bae51c4172f0ece84bd&scene=21#wechat_redirect
Plasma 正是一个旨在提高交易吞吐量的 Layer 2 扩展框架。
该方案旨在提高加密货币交易的吞吐量，并解决困扰用户已久的拥堵问题。

并且最重要的一点是：它到底是什么？
	レイヤー２におけるスケーリングソリューション
	1． Plasma 作为 Layer 2 技术的理论基础

	我们依照这种分类方式巧妙地将 Layer 2 机制分为两类：“Plasma”和“通道技术”（比如“状态通道”或者“支付通道”）。
	 -1. 在通道技术中，通道交易的最终敲定不必与主链进行任何交互；而对于 Plasma 交易，其必须与主链进行一次交互（由 Plasma 运营者而不是用户进行广播，这部分内容下文会进行介绍）。
	 -2. 然而，在 Plasma 中，只有交易的发送方需要表态是否同意。除此以外，所有相关参与方都不需要执行流动性锁定/限制来进入、退出和自由交易（事实证明，“谁需要同意状态更新”也是区分“通道技术”和“Plasma”的等效方式）。
	 因此，片面而言，我们可以说通道技术更适用于依赖即时敲定特性，以及拥有相对固定的会进行交互的参与者集合的应用，而 Plasma 更适用于涉及多方参与者、强调高交易吞吐量并且即时敲定特性重要性相对较低的场景。
	 
	我们将会看到：有一些结构同时利用了通道技术和 Plasma 机制，并尝试尽可能地融合二者的优势。


	2. 关于第一个具体的Plasma规范“最小可行 Plasma (MVP)”的内部工作原理的解释

	白皮书中所提及的一些想法——比如嵌套的Plasma链树——仍旧超出了目前的Plasma研究的范围内，甚至有可能无法实现。
	Plasma的关键属性是多笔交易被压缩且被最终敲定，并且只有一笔交易与主链交互。在MVP中，“压缩”是通过默克尔树完成的：交易被组合在一起并通过默克尔化得到一个根，然而这个根被放置在Layer 1。交易本身遵循比特币式的UTXO模型。
	一条Plasma链本身就是一条区块链！通过使用必要的链下Plasma区块数据和链上默克尔根数据，用户可以验证自身的合法权利，并依靠以太坊的链上智能合约来执行规则且解决所有争议。
	我们将负责执行上述过程（即默克尔化交易、广播根，并与用户共享数据）的实体——Plasma“区块创建者”——称为Plasma运营者。

	alice -> bob flow


Plasma 链具有什么样的能力？

	那么Alice可能会反复尝试不正当的提现，从而迫使 Bob（或其他参与者）每次都要花费gas费用来进行响应。

	--假设 普通用户作恶--
	对特定的UTXO进行质疑


	--假设 operator作恶--
	运营者全权负责创建区块，因此其理论上可以随意包含任意他想要的东西。更糟糕的是，接下来，运营者要求使用这笔无效交易来进行链上提现。
	与 Alice 在上述案例中的欺诈行为不同，因为那只是 Alice 试图进行双重花费，而这笔交易花费的是一个甚至都不存在的“UTXO”。因此，我们无法使用先前的质疑和取消提现的方案。

	鉴于我们不能直接阻止运营者退出，我们可以允许其他参与者先退出：由智能合约负责强制执行一个退出队列，并确保先前的 UTXO 优先退出。
	只要每个人——没错，确实是每个人——使用Plasma链在运营者的大规模提现完成之前撤回各自的资金，那么运营者想要偷走的以太币将被排空，由此他的恶意企图最终只能无功而返。

	悪意のあるオペレータ（またはハッキングされた、または侵入されたオペレータである可能性が高い）

	事实上，在真正最糟糕的情况下，如果主链区块拥堵的时间足够长，那么用户可能无法及时退出，因此实际上可能会失去他们的资金。


	我们也要求所有用户完全验证整条 Plasma 链。Plasma 在扩展以太坊的交易吞吐量上是十分有用的，但 Plasma 链提供的每秒交易吞吐量越高，客户端在带宽和内存方面的负担就会越重。

	MVP　総括
	①mass exit, 資金失いのリスクがある
	②全てのTxの保存と検証、メモリ、ネット帯域を消費する。（利益にならない、この計算パワーがあれば、他のアルトコインのマイニングに移すことでしょう）

	＝＞　Plasma Cashの生まれ
	①问题”的根源在于文中所讨论的资产的可替代性。比方说，我们说 Bob“欠了”5个以太币。由于以太币是一种可替代资产，因此谈论 Bob 欠的是“哪几个特定的以太币”是没有意义的。以太币就是以太币，
	所以运营者窃取的其实就是集体的Plasma以太币池子里的资金。
	NFT、这可以解决我们的问题吗 (或者可能引入新的问题吗)？
　　　　在 Plasma Cash 链上的所有资产都是不可替代代币。一个NFT（我们称之为“币”）可以代表任何东西：固定的以太币面额、一个 ERC-20 代币、一捆 ERC-20 代币、一窝谜恋猫，或者成为能够在 Plasma 链条上连续创建 100 个区块的 Plasma 运营者的权利 

	alice　->　bob　フロー
	因此，一个币的完整历史可以通过其在每个 Plasma 区块中是否存在来进行描述——我们只需从当前区块一路遍历回这个币首次存入的区块。
	正如我们即将展示的那样，一个币的完整历史能够充分保护其持有者的所有权。
	如果 Bob 想要证明他的币存在于某个区块中，那么他只需要提供交易的默克尔路径。然而，想要证明这个币没有在某个区块中转移，Bob 需要能够证明数据的缺席。这一点是我们所熟知和喜爱的默克尔树不支持的功能。
	
	②为了实现这种“缺席证明”功能，Plasma Cash 使用我们称为稀疏默克尔树 (SMT) 的加强版默克尔树结构。
	SMT 是具有额外的特殊功能的默克尔树：树的每一片叶子 (在本文例子中，是币) 都被赋予一个唯一的识别号，以用于确定它们所在的树的位置。
	，我们就是对这些叶子进行分类排序，每一个币只能位于分配给自己的“槽”中。这意味着，如果这个币缺席的话，那么我们一定能够知道它所存在的位置；相反，如果这个币出现了的话，那么我们就能够通过证明“槽是‘空’的 (即等于某个null值，比如0或者“未定义”，等等)”默克尔分支来证明这个币已经易主了。
	因此，既然我们可以在每个区块中证明币是否存在，我们就可以追踪币的完整历史
	证明这一历史所需的数据仅为每个区块中那一丢丢微不足道的默克尔证明，而不是 MVP 所要求的完整 Plasma 区块
	哎，Plasma 轻客户端有着落了！现在我们再来推敲一下关于默克尔证明序列足以让币的当前所有者保护自有资金的说法。换句话说，只要 Steve 拥有他的币的完整历史 (以上述形式存在)，那么他就得到客观保证：
	
		1）如果/当他试图提现，那么他将能够对任何质疑作出适当的响应。
		2）如果/当其他参与者试图撤出他的币时，那么他将能够发起质疑并成功推翻他人的撤回请求。
	这里要强调的一个要点是，如果 Steve 想要确认自己的收款 (在这个案例中，就是在第 504 个区块时从 Bill 处收到的付款) 是否已经最终敲定，他首先必须接收并验证这个币的完整历史 (即验证先前每个区块中的默克尔证明)。然后，并且只有在那时，他才能真正拥有这个币的所有权。
	这将使得强制提现的风险与通道中心的风险对等。如果 Plasma 链无法操作，那么用户最终 (可能) 会退出。但这种退出不会带来任何恐慌、时间敏感性以及强制大规模退出失败的结果。
	
	当一个币在 Plasma 链中停留的时间足够长时，每个 Plasma 区块中的每一个币的单个默克尔证明的大小就会变得很大。此外，请记住，每一次支付都意味着用户需要将相关的完整历史转移给收款方。
	
	基于 Plasma Cash 的方案，以最大限度地减少历史数据的膨胀问题。最重要的是，挽救支付的可替代性，同时仍旧保留Plasma Cash 的优势。
	＝＞Plasma Group and Chamber
	
在见证 Plasma 落地并有效运作之前，我们还面临哪些阻碍？
Plasma 的权衡是什么？
它的工作原理是什么？


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

exit攻防
chamber分析

展望ー最先端技術

	https://www.8btc.com/article/341657
	处理能力达500Tx/s，ZKSNARKs Plasma ETH扩容解决方案在测试网上线
　　　　“在该方案中，用户对交易的验证由以下方法代替，即发起区块的运营商必须提交一个可以证明新区块正确的SNARK，智能合约会自动验证。运营商不能将不正确的区块放进区块链中，因此用户无需始终保持在线状态，也不需要持续监控交易活动。”

改善

depositロック
exit期間
ファイナリティ　－＞FF
トランザクションの履歴の膨らみ　－＞Checkpoint
通用のPlasmaフレームワークの構築
Walletのオンライン
取引の断片化
ユーザビリティ


ーーーーーーーーーーーーーーー
treeのexclusion証明
txとproofの歴史
getblog、コンファメーション（confirmation）の設定で、ファイナリティを決める。plasmaチェーンではコンファメーションが要らない、ブロックに記録された時点で、ファイナリティとなる。
UTXO
ーーーーーーーーーーーーーーーーーーー

PlasmaからPlasma Cashへ。その仕組みとメリットと課題点
https://zoom-blc.com/what-is-plasma-cash

「親チェーン」と「子チェーン」として表現していきます
この親チェーンのブロックが承認されて初めて子チェーンに新たに追加されたブロックは承認されることになるのです。

トランザクションがイーサリアムのメインチェーンにまとめてハッシュ値として記録されるのでかなりのスケーリング効果が期待できるのです。

アリスやボブが自分で監視していなくても他の誰かによって子チェーンが監視されていれば、攻撃されたときに誰かが代わりに不正行為を申告してくれるはずです。
しかし、100%のセキュリティを維持するためには自分自身で自分が利用している子チェーンは監視するべきでしょう。


また、ユーザーはトークンを子チェーンから引き出すときに保証金(Security Deposit)をデポジットしなければなりません。
不正を行なっておらず、無事引き出しが完了した場合はこの保証金はユーザーの元に返金されます。しかし、もし不正を行なっていた場合は、この保証金はユーザーの元には返金されず、その不正行為を申告した申告者に報酬金として渡されます。

ちなみに、子チェーンはファイナリティが必要なので、PoWではなくPoAやPoSが原則前提となっています。

ユーザーが子チェーンのデータを全てダウンロードしなければならない、ということがあげられます。これは、ユーザーの二重支払いやブロック生成者の不正なブロック生成などの攻撃を防ぐためです。
ユーザーが送金をするときにはある特定の子チェーンの特定のブロック高において送金額以上の残高を保持し、かつそのUTXOが複数の受け手に対して送信されていないことを証明する必要があります。

そのトークンの履歴（子チェーンにデポジットされてから、誰から誰に送られてきたか）を参照するために子チェーンのデータを全てダウンロードし、二重支払いを行なっていない証明をする必要があるのです。

これは、プラズマチェーンにデポジットするそれぞれのトークンに対して、特有のTokenIDを与えることにより実現されています。

このようにデポジットされたトークンに対して、固有のTokenIDを与えることで子チェーンでのトランザクションを保持するデータ構造を変更することできます。
Plasma Cashではデポジット時に付与したTokenID順にトランザクションをマークル木（あるいはマークル・パトリシア木）で整理しているのです。

Plasma固有のUTXOに基づいたトランザクションデータ
これにより、ユーザーは自身のTokenIDとマークル木のインデックス番号を照合するだけで、そのトークンは有効であることが証明できるのです。

Plasma Cashでは、TokenIDが1のマークル・ブランチの履歴を送り手が提示するだけでOKです。他の関係のないTokenIDに関するデータは一切必要ありません。
つまり、二重支払いをしていない証明をするためにはそのTokenIDの位置が空データであればいいことになります。

マークル・ブランチ
ハイスループット

検証データの最小化
この確認トランザクションが親チェーンのブロックに取り込まれて初めてプラズマチェーンにおいてそのトランザクションは承認されることになります。

監視

デポジットするトークン量が少なすぎるとコントラクトを実行するgasの方が大きくなってしまうのである程度のトークン量は最低限必要になります。
Proof of NonExistence

また、このような設計上、同じブロックにおいて同じTokenIDを持つトークンを2回以上送金することはできないということになります。
不正申告(challenge)

また、ブロック生成者がブロックをブロードキャストせず、ユーザーにトークンの履歴自体を与えないような不正に対しても、Plasma Cashの設計であれば申告を成功させることができます。
ブロードキャスト

固有のIDを割り当てることでUX的にかなり改善がされました。　

分割、結合
merge/split


ひとつのコインと見なし

欲しい量のトークンを保持している第三者を介して送金を行う


上手くマッチング

このようなインセンティブ設計にすることでMass Exit攻撃を防ごうとしているのです。
攻撃者が引き出しリクエストを大量に送り、トランザクションを詰まらせ、gasを上昇させます。
すると、申告者が申告を行うときに送信するトランザクションで消費されるgasが、申告が成功したときに得られる報酬金と比べて大差がなくなってしまったり、より大きくなってしまうことも考えられます。

インセンティブ設計が崩れてしまう
妨害

このデータサイズをBloom filterやzk-SNARKsの技術を用いることでさらに削減しようとする提案もされています。
Exitプロセスの最適化


https://docs.google.com/presentation/d/1h-y7-Z0g2NznFpWHshP7fORSVd1wtlcyLDLYbibnlUw/edit#slide=id.p
ppt作成参照

UTXO
https://zoom-blc.com/utxo-bitcoin

ビットコインの取引はUTXOを介して実行されます。
ビットコインのすべての取引においてUTXOを新たに生成し、UTXOを消費することで送金が完了するのです。UTXOはシステム側の仕組みなのでユーザーが意識することはありませんが、アドレスの残高算出などもこのUTXOを計算することで行われています。

役割を果たします

UTXOベースの残高管理方法であり、さまざまなメリットがあるのです。（もちろんデメリットもあります。）

UTXO(Unspent Transaction Output)とは、訳すと「未使用のトランザクションの出力」

ビットコインのトランザクションはインプット(input)とアウトプット(output)から構成されています。つまり、ビットコインの送金がアウトプットにあたり、着金がインプットにあたります。


合計額

UTXOは分割できない

coinbaseトランザクション（ブロック最初のトランザクション）


アドレスの残高は上述したUTXOを全て計算することにより算出します。これをUTXOベースと呼びます。
直接残高をブロックチェーンに記録する方法をアカウントベースと呼びます。ちなみにイーサリアムやNEMはアカウントベースを採用しています。


UTXOのメリット
１．プライバシー保護に優れている
　　　お釣りはUTXOに新規に生成できる。
　　　アカウントベースの場合ーーー　アドレスの残高を直接ブロックに記録しているので、単純にその残高から送金分を差し引くだけでいいからです。

２．リプレイアタックの耐性が強い

全く同じアドレス・秘密鍵の構造

UTXOのデメリット
１．　実装が複雑
　また、送金するときのUTXOの計算も複雑になります。あるアドレスが複数のUTXOを持っているとすると、どのUTXOを送金のためのUTXOに当て、どのUTXOをおつりにするか選択しなければなりません。ビットコインの場合、取引手数料はトランザクションのサイズで決まります。


https://zoom-blc.com/what-is-ethereum-zk-snark

イーサリアムに導入されたプライバシー保護技術「zk-SNARK」とは

現在、パブリックなブロックチェーンで大きな課題となっているのが、スケーラビリティ問題とプライバシー問題です。

スケーラビリティ問題はすでに送金遅延や手数料増加などユーザーにとっても実害が現れているので、一番深刻な問題であるとされています。

Zero Knowledgeとは、後述するゼロ知識（証明）のことであり「相手に情報の内容を公開することなく、情報自体は知っていることを証明する技術」です

多くの時間がかかってしまったり、多額の手数料がかかってしまうなどの問題があげられます。


ライデンネットワークの仕組み
balance proofs（バランス・プルーフ）
source: What is the Raiden Network

ネットワークにおいて、特定のピアに到達するために他のピアを介してつながります。このとき、どのようにして最適な仲介ピアを選択するかという問題です。

source: Mathematical Proof That the Lightning Network Cannot Be a Decentralized Bitcoin Scaling Solution

高額の送金には適していない
ライデンネットワークはあくまでも少額の高速送金として実用化されます。なぜなら、バランスプルーフでは参加者がデポジットしたトークンを上限としてやり取りが行われるからです。


https://speakerdeck.com/ymatsuwitter/learning-plasma-from-plasma-mvp
Learning Plasma from plasma-mvp

一定のblock感覚で、例えば、60s


https://speakerdeck.com/ymatsuwitter/plasma-cash-and-xt

マークルツリーでのどこかに関連する不正なtxが記録されるか不明のため、


NFT　No fungible token, 各トークンに個別の価値うが付加される。　crypto　kitties（ERC721）
FT、fungible	token ,コインの区別がない、等価

ユーザが監視すべきデータをlog（コインの発行図）に抑える。

対話的

イーサリアム　スケーリングの背景と概要
スケーラビリティ　・　トリレンマ

分散性、

三つ同時に満たすのが難しい
ボトルネットは何か、
高水準に保ったまま
安全性ー＞ハッシュパワー
スケーラビリティー＞高い処理能力
方法：
メインチェーン自体での検証作業最小化

視点から
故意、過失
ソフトバンクの大規模な通信障害
損失は遅れたものが被る
待たないといけない
皆こぞってこのチェーンから逃げる
平衡

覆る
覆す

ユーティリティ

プライバシー、51%攻撃、スケーラビリティ、


バリデーション


Plasma上でのTxごとにそのERC-20トークン建てて手数料を取ることはあります。

端的に言うと、オペレータに対して 「私（オペレータ）はいついつまでにこの tx をチェーンに含めます。もし含められなかった場合は私の資産から同額を奪い取ってもらって構いません。」 という契約を結ばせ、この契約をもってして実質的（cryptoeconomic）な finality とみなす、ということみたいです。


https://medium.com/loom-network-japanese/plasma-cash-cli-4c98f7170c64

Plasma Cashとは簡潔に言うと、サイドチェーンへのトラストを必要とせずに、ユーザーのデジタル資産をEthereumメインネットからサイドチェーンへ安全に移転させることのできるものである。

トランスファーゲートウェイ

トリガーが引かれる

定期的にマークル証明をEthereumメインネットへ報告している。

デポジットされた資産を含む単一トランザクションのブロックをサイドチェーン上に生成する。

ストレージリソースを維持することが必要となる。
これらのハッシュ値はブロックの「要約」として使用されるが、検証のために使うことも可能である。

各トランザクションがまずハッシュ化され、Hash(A), Hash(B)などを作成する。その後Hash(A)およびHash(B)は合わせてハッシュ化されHash(Hash(A) + Hash(B))となり、次のレベルのツリーを作る。ツリーの右側では、トランザクションCとDに同じことが起こっている。


ツリーの構成は再帰的であるため、マークルパスと併せてこのルートハッシュを使い、任意のブロックの任意のトランザクションの検証に使用できる証明を作成することが可能である。


ユーザーがトランザクションKがブロックに含まれていることをノードで検証したい場合、ノードはブロックのマークルルートを保持しているだけでよい。ユーザーは(a)トランザクションが含まれるブロック番号、(b)トランザクションK、および(c)マークル証明を提供することとなる。


イベントフィルタリングに使用され、プログラムがこれ以降のブロックのみを見るようにする。


どこかで0.0005 ETHを使ったり、２つの0.001 ETHを合わせて0.002 ETHのコインを作ることはできない。異なる価値のトークンを手に入れるには、Exitして再デポジットしなくてはならない。


Plasma MVP を理解しよう！その１
https://medium.com/logica-tech-blog/plasma-mvp-explanation-part1-e4d72d5a527d

Ethereum における現在の TPS(transaction per second) は 10–20 TPS 程度であり、既存のアプリケーションと比較して単位時間あたりの処理量が少なすぎるため、本格的な利用の普及にあたっては Scalability の改善が必須であろうと言われています。

1. すべてのフルノードが同じ計算をしている  ——》 　Sharding 

2. 扱える transaction の数が制限されている -》　オフチェーン
ネットワーク帯域やストレージ領域の拡大に伴うコスト増がノード数の低下を招いて非中央集権性の低下に繋がってしまうと考えられており、簡単にこの上限を上げればそれで全て解決するというものでもないようです。
セキュリティ的に重要な処理のみに絞って Ethereum 上で実行し、それ以外の処理は off-chain で実行させつつも mainchain のセキュリティを担保する手法です。
Layer 2 (solutions) と俗に呼ばれていますが Plasma はこれに該当します。他にも Raiden Network、Truebit などのプロジェクトが存在します。


3. block 生成間隔 -》 コンセンサス修正


Ethereum のプロトコル自体を更新


genesis block

これは非中央集権性を失わないためには非常に重要でしたが、非中央集権性を担保しながら各ノードに別の transaction を分担して処理させることができるのならばその方が効率が良くなるのもまた自明です

Ethereum では block に含まれる各 transaction に設定される gas limit の集計の上限値(block gas limit)が存在していて、これを超えて transaction を block に含めることはできません

せっかく off-chain で処理した結果のすべてを mainchain に書き戻してしまっては無駄が大きいので、ある時点の blockchain の状態を圧縮した state commitment と呼ばれるようなデータだけを mainchain に書き込みます。

改ざん耐性
 deposit した資産をユーザの任意のタイミングで引き出すことができる必要がありますが、


フォーカスし、実装の紹介などもまじえながら詳細な解説をしたいと思いますので

Plasma MVP を理解しよう！その２
https://medium.com/logica-tech-blog/plasma-mvp-explanation-part2-d100b031aaa5

アクティブ

シーケンス図

全体像

Contract は mainchain である Ethereum と sidechain である Plasma Chain をつなぐ役割を担う mainchain 上の smart contract であり、オペレータによってデプロイされます。

、Contract の event 発火を外部から監視するという手法が一般的です

Plasma Chain はオペレータによって運用されているので、オペレータが作為的に不正確なブロックやトランザクションについての情報を公開することもできます

何らかの不正が行われたであろうことがすぐに確認できます。

それが有効と認められれば、その UTXO を Plasma Chain 上で消滅させた上で Contract からユーザに対して同額の ETH が送金されます。

btc/ethなどのブロックチェーンの場合、txがブロックに記録されたことで

消費された UTXO 
exit の不正を告発

これらを Contract の challengeExit() という関数に渡すことでその exit は自動的に却下されます。

challenge を行う動機になるように考えられています。

没収


ユーザは全てのトランザクションを監視する必要がある

起こり得る

1つの同じ資産のプールから皆が引き出すという形になるため

してしまえば
原資を失っている
自身が損を被る可能性が発生することになります

これらの理由から Plasma MVP では利用者自身が全てのトランザクションに目を光らせ、いち早く不正に気づいて challenge をする必要があると言われています。


もう一方の登場人物であるオペレータはその立場上、様々な不正を行えるであろうことも考慮しなければなりません。


対抗する術（すべ）がありません。

時間順で古い方から処理されており、ユーザはオペレータの不正に気づいたあとに新しいトランザクションの送信をせず直ちに exit の申請を行うかぎり、必ず先に exit できるため資産を失わずにすむのです。


作成から 7 日間以上経過している UTXO の exit


UTXO position は block number * 1,000,000,000 + transaction index * 10,000 + output index で計算される

簡単にまとめれば、off-chain で高速に処理するために Plasma Chain を運用するオペレータを全面的に信頼することになるが、
mainchain である Ethereum を工夫して上手に利用することで、オペレータがどんな不正をしたとしてもユーザの資産を守れるように設計するというのが Plasma MVP です。

仕様が提案・検討されています。

そんな人と議論を交わすことができる

この記事をきっかけに Plasma に興味を持ち、ethresearch を眺める人が少しでも増え、そんな人と議論を交わすことができるような、そういう記事になればとても嬉しいです！















